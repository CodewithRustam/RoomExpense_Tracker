@using Microsoft.AspNetCore.Mvc.Rendering
@model RoomExpenseTracker.ViewModels.RoomExpensesViewModel

<div class="px-4 sm:px-0 mb-6">
    <div class="flex justify-start sm:justify-end items-center gap-3 text-base font-semibold flex-nowrap">
        <span class="text-indigo-600 bg-indigo-50 px-3 py-1 rounded-full shadow-sm whitespace-nowrap">
            ₹@(Model.AvgPerPerson?.ToString("F2") ?? "0.00") / person
        </span>
        <span class="text-gray-500">•</span>
        <span class="text-red-500 bg-red-50 px-3 py-1 rounded-full shadow-sm whitespace-nowrap">
            ₹@(Model.TotalExpense?.ToString("F2") ?? "0.00") total
        </span>
    </div>
</div>

<div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
    @foreach (var person in Model.Summary)
    {
        var difference = person.Total - Model.AvgPerPerson;
        var isOwed = difference > 0;
        var isOwing = difference < 0;
        var amountClass = isOwed ? "text-green-600 bg-green-50" :
        isOwing ? "text-red-600 bg-red-50" : "text-blue-600 bg-blue-50";
        var badgeText = isOwed ? "You're owed" :
        isOwing ? "You owe" : "Settled up";
        var badgeAmount = isOwing ? Math.Abs(Convert.ToDecimal(difference)) : difference;

        <div class="bg-white rounded-2xl shadow-xl hover:shadow-2xl transition-shadow p-5 relative overflow-hidden border border-gray-100">
            <div class="absolute -top-10 -right-10 w-32 h-32 bg-gradient-to-br from-indigo-200 to-purple-300 opacity-10 rotate-45"></div>

            <div class="flex justify-between items-center mb-4">
                <h3 class="text-xl font-bold text-gray-800">@person.MemberName</h3>
                <span class="@amountClass px-3 py-1 rounded-full text-sm font-medium shadow">
                    @badgeText
                    @if (difference != 0)
                    {
                        <span>: ₹@badgeAmount?.ToString("F2")</span>
                    }
                </span>
            </div>

            <p class="text-gray-500 mb-2">
                Total:
                <span class="font-semibold text-gray-800">₹@person.Total?.ToString("F2")</span>
            </p>

            <div class="max-h-48 overflow-y-auto scrollbar-thin scrollbar-thumb-indigo-300 scrollbar-track-gray-100">
                <table class="w-full text-sm mt-3">
                    <thead class="text-center">
                        <tr class="text-left text-gray-500 border-b">
                            <th class="py-2 pr-2 text-left" style="width: 50%;">Item</th>
                            <th class="py-2 pr-2 text-left" style="width: 20%;">Amount</th>
                            <th class="py-2 text-left" style="width: 20%;">Date</th>
                            @if (User.Identity != null && User.Identity.IsAuthenticated && User.Identity.Name == person.MemberName)
                            {
                                <th class="py-2 text-right" style="width: 10%;">Action</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var expense in person.Items)
                        {
                            <tr class="hover:bg-gray-50">
                                <td class="py-2 pr-2 text-gray-700" style="width: 50%;">@expense.Item</td>
                                <td class="py-2 pr-2 text-gray-700" style="width: 20%;">₹@expense.Amount.ToString("F2")</td>
                                <td class="py-2 text-gray-500 whitespace-nowrap" style="width: 20%;">@expense.Date.ToString("MMM dd")</td>
                                @if (User.Identity != null && User.Identity.IsAuthenticated && User.Identity.Name == person.MemberName)
                                {
                                    <td class="py-2 text-right" style="width: 10%;">
                                        <button class="edit-expense-btn text-indigo-600 hover:text-indigo-800"
                                                data-expense-id="@expense.ExpenseId"
                                                data-item="@expense.Item"
                                                data-amount="@expense.Amount"
                                                data-date="@expense.Date.ToString("yyyy-MM-dd")"
                                                data-room-id="@expense.RoomId">
                                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                                                 xmlns="http://www.w3.org/2000/svg">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                      d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0
                                                                  112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                            </svg>
                                        </button>
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>

<!-- Edit Expense Modal -->
<div id="editExpenseModal" class="fixed inset-0 hidden z-50 bg-black bg-opacity-50 flex items-center justify-center transition-opacity duration-300 ease-in-out" style="background-color: rgba(0, 0, 0, 0.5); top:-16px" role="dialog" aria-modal="true" aria-labelledby="editExpenseModalTitle">
    <div class="bg-white rounded-lg p-6 w-[90%] sm:w-[80%] md:w-[60%] lg:w-[40%] xl:w-[30%] max-w-md relative z-[60]">
        <div class="flex justify-between items-center mb-6">
            <h2 id="editExpenseModalTitle" class="text-xl font-bold text-gray-800">Edit Expense</h2>
            <button class="close-modal text-gray-500 hover:text-gray-700">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                     xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                          d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>
        @await Html.PartialAsync("_EditExpenseModal", new ExpenseViewModel())  
    </div>
</div>

<style>
    .no-scroll {
        overflow: hidden;
    }

    #editExpenseModal {
        transition: opacity 0.3s ease-in-out;
        opacity: 0;
    }

    #editExpenseModal:not(.hidden) {
        opacity: 1;
    }
</style>
<partial name="_ValidationScriptsPartial" />

<script>
    $(document).ready(function () {
        let originalItem, originalAmount, originalDate;

        // Open modal
    $('.edit-expense-btn').on('click', function () {
        const $btn = $(this);
        $('#expenseId').val($btn.data('expense-id'));
        $('#item').val($btn.data('item'));
        $('#amount').val($btn.data('amount'));
        $('#date').val($btn.data('date'));
        $('#roomId').val($btn.data('room-id'));

        // Store original values
        originalItem = $btn.data('item');
        originalAmount = $btn.data('amount').toString();
        originalDate = $btn.data('date');

        $('#editExpenseModal').removeClass('hidden');
        $('body').addClass('no-scroll');

        $.validator.unobtrusive.parse('#editExpenseForm');
    });

        // Close modal
        $('.close-modal').on('click', function () {
            $('#editExpenseModal').addClass('hidden');
            $('body').removeClass('no-scroll');
        });

        // Click on backdrop
        $('#editExpenseModal').on('click', function (e) {
            if ($(e.target).is('#editExpenseModal')) {
                $(this).addClass('hidden');
                $('body').removeClass('no-scroll');
            }
        });

        $(document).on('keydown', function (e) {
            if (e.key === 'Escape') {
                $('#editExpenseModal').addClass('hidden');
                $('body').removeClass('no-scroll');
            }
        });

        $('#editExpenseForm').on('submit', function (e) {
            const currentItem = $('#item').val();
            const currentAmount = $('#amount').val();
            const currentDate = $('#date').val();

            if(currentAmount <= 0)
            {
                alert("Amount must be greater than zero.");
                e.preventDefault();
                return;
            }

            if (currentItem === originalItem && currentAmount === originalAmount && currentDate === originalDate) 
            {
                alert("No changes made to the expense. Please update before saving.");
                e.preventDefault();
                return;
            }

            $.ajax({
                url: '@Url.Action("EditExpense", "Expenses")',
                type: 'POST',
                data: $(this).serialize(),
                success: function (response) {
                    if (response.redirectToUrl) {
                        window.location.href = response.redirectToUrl;
                    } else {
                        $('#editExpenseModal').addClass('hidden');
                        $('body').removeClass('no-scroll');
                        location.reload();
                    }
                },
                error: function (xhr) {
                    alert('Error: ' + xhr.responseText);
                }
            });

            e.preventDefault(); 
        });
    });
</script>